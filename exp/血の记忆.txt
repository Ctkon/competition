1：倍增算贡献时要先算贡献，再将点往上跳
2：爆了空间也爆零
3：逐字比较样例
4：学了高级算法分析能力下降，一定要多想！多分析！不要看题解，不要想那些很高级的算法，现在遇到的题没有需要高级算法的
5：看题目要仔细
6：要学会写对拍
7：注意策略和时间
8：思考五分钟，代码两小时，学会写算法流程图，想清楚再写
9：写的时候模块化
10：学会静态查错
11：看书和考试的时候多想，成绩不重要，重要是锻炼
12：题一定要补完（虽然之前欠了很多）
13：读题的时候一定要结合样例
14：考试的时候尽量对拍，（提高代码能力，减少码代码时间）
15：尽量不写快读，写的话仔细查错
16：linux与windows编译环境差异大，注意以下情况：
1)void不要写成其他有返回值的函数类型（int，bool）
2)有返回值的函数一定要记得如果不需要返回记得加return 0，（不会默认return 0）
17：如果准备全力想一道题，请先打完其他题的暴力
18：要搞清楚比赛策略
19：加强码力
20：用滚动数组时记得清零
21：搞清楚有向边和无向边
22：板子要复习和巩固，不要会用但写不对
23：在遇到稠密图时，求最短路要想到floyd
24：要善于发现问题中隐藏的单调性，这可能大大降低复杂度
25：如果没有，要想到去维护，对于有很多修改的题，如果没有强制在线，可以考虑离线
并通过某种顺序执行来降低复杂度（eg：莫队）
26：要将描述或求解较为复杂的问题拆成子问题解决
27：并查集常维护有传递性的题目（eg：等于关系）
28：可以染色缩点，有时朴素想法反而可能更优
29：考试的时候千万不要炸心态，考试时要只想题目
30：如果题目要对2^3取模或对2^64取模要想到自然溢出
31：数组的下标可能是另一个数组的一个元素的值，不要搞错了
32：括号匹配一定要搞清楚，对于较长或较复杂的计算式或判断式要多打空格
33：学过的东西一定要记清楚，实在不行就复习，一定要搞清楚，避免会做不会用（eg：STL）
34：排序型贪心一般用邻项微扰证明，树上贪心一般用决策包容性证明
35：把lower_bound搞清楚
36：scanf和printf数据类型要对齐
37：注意变量名里如果有数字，注意不要打反：eg: sum1--sum2
38：注意循环里给某个变量初始化时，不要放错循环
39：区间之间如果不相交，只包含，可以考虑转化成树上问题
40：set等stl在用iterator时注意set为空或到边界的情况
41：同一行函数从右往左调用，（栈）
42：数组下标如 i 和 j 千万不要搞反了
43：变量名一定要注意不要和关键字冲突了
44：线段树在L<=mid<=R时，两个modify一个是（L,mid）,一个是（mid+1,R）
45：线段树等数据结构空间要开够
46：type 0和1不要打反了
47：max和min不要搞错了（不要复制粘贴，踏踏实实手打）
48：有的样例会被分成两页，要记得注意
49：输出不要肉眼对，一定要用文件比较，眼睛对会出错！
50：涉及到前缀和的贪心，或者说是和顺序有关的01背包（国王游戏）通常从答案的计算式入手来得到排序方案
51：开long long
52：图上问题差不出错考虑检查建图是否出错
53：知道DP顺序时不要记忆化
54：涉及到可以选择交换操作的题目，考虑某些操作对全局的顺序造成的影响
55：当遇到需要确认较少数量的元素的顺序才能转移时，如果只需知道当前元素与前面元素的关系，而前面元素内部的关系无所谓时，就只需维护一个集合
56：DP时要尽可能维护多的信息，但有时也可以舍去不必要信息来降低复杂度
57：学会打表
58：不在线询问的题都该想一想离线
59：离线询问后，除了可以分治，还可以分块
60：矩阵型计数题目可以考虑按行分治
61：按行分治的题目有时也可以按列分治，两者有时可以交错进行，优化复杂度
62：字符串哈希记得取模
63：BFS队列里面是可以放很多点的
64：曼哈顿距离可以转成切比雪夫距离
65：一些分组DP转移想不到怎么优化的时候，可以确认一下答案的上界，进而确认DP时的限制
66：double可以输出-0
